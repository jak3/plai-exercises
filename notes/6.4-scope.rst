6.4 Scope
=========

The broken environment interpreter above implements what is known as dynamic
scope. This means the environment accumulates bindings as the program executes.
As a result, whether an identifier is even bound depends on the history of
program execution. We should regard this unambiguously as a flaw of programming
language design. It adversely affects all tools that read and process programs:
compilers, IDEs, and humans.

In contrast, substitution—and environments, done correctly—give us lexical
scope or static scope. “Lexical” in this context means “as determined from the
source program”, while “static” in computer science means “without running the
program”, so these are appealing to the same intuition. When we examine an
identifier, we want to know two things: (1) Is it bound? (2) If so, where? By
“where” we mean: if there are multiple bindings for the same name, which one
governs this identifier? Put differently, which one’s substitution will give a
value to this identifier? In general, these questions cannot be answered
statically in a dynamically-scoped language: so your IDE, for instance, cannot
overlay arrows to show you this information (as DrRacket does). Thus, even
though the rules of scope become more complex as the space of names becomes
richer (e.g., objects, threads, etc.), we should always strive to preserve the
spirit of static scoping.

6.4.1 How Bad Is It?
--------------------

You might look at our running example and wonder whether we’re creating a
tempest in a teapot. In return, you should consider two situations:

1. To understand the binding structure of your program, you may need to look at the whole program. No matter how much you’ve decomposed your program into small, understandable fragments, it doesn’t matter if you have a free identifier anywhere.

2. Understanding the binding structure is not only a function of the size of the program but also of the complexity of its control flow. Imagine an interactive program with numerous callbacks; you’d have to track through every one of them, too, to know which binding governs an identifier.

Need a little more of a nudge? Let’s replace the expression of our example
program with this one::

    (if (moon-visible?)
      (f1 10)
      (f2 10))

Suppose `moon-visible?` is a function that presumably evaluates to false on
new-moon nights, and true at other times. Then, this program will evaluate to
an answer except on new-moon nights, when it will fail with an unbound
identifier error.

	Exercise

    What happens on cloudy nights?

6.4.2 The Top-Level Scope
-------------------------

Matters become more complex when we contemplate top-level definitions in many
languages. For instance, some versions of Scheme (which is a paragon of lexical
scoping) allow you to write this::

    (define y 1)
    (define (f x) (+ x y))

which seems to pretty clearly suggest where the y in the body of f will come
from, except::

    (define y 1)
    (define (f x) (+ x y))
    (define y 2)

is legal and (f 10) produces 12. Wait, you might think, always take the last
one! But::

    (define y 1)
    (define f (let ((z y)) (lambda (x) (+ x y z))))
    (define y 2)

Here, z is bound to the first value of y whereas the inner y is bound to the
second value.Most “scripting” languages exhibit similar problems. As a result,
on the Web you will find enormous confusion about whether a certain language is
statically- or dynamically-scoped, when in fact readers are comparing behavior
inside functions (often static) against the top-level (usually dynamic).
Beware! There is actually a valid explanation of this behavior in terms of
lexical scope, but it can become convoluted, and perhaps a more sensible option
is to prevent such redefinition. Racket does precisely this, thereby offering
the convenience of a top-level without its pain.

6.5 Exposing the Environment
============================

If we were building the implementation for others to use, it would be wise and
a courtesy for the exported interpreter to take only an expression and list of
function definitions, and invoke our defined interp with the empty environment.
This both spares users an implementation detail, and avoids the use of an
interpreter with an incorrect environment. In some contexts, however, it can be
useful to expose the environment parameter. For instance, the environment can
represent a set of pre-defined bindings: e.g., if the language wishes to
provide pi automatically bound to 3.2 (in Indiana).
